server.1=192.168.10.128:2888:3888
server.2=192.168.10.129:2888:3888
server.3=192.168.10.130:2888:3888
对于1xx的状态码，为信息状态码
100为继续，表示确认，成功返回具体参数信息。

对于2xx的状态码
200 表示正常返回信息，
201表示请求成功并且服务器创建了新的资源，
202表示服务器已接受请求，但尚未处理。

对于3xx，重定向
301：永久重定向，永远都定向到b的地址，例子：访问地址a的时候，永远都会定向到地址b，
302: 临时重定向(一次的)，例子：去访问a地址，返回302,就会自动跳转到b,下次再去访问a地址的时候，还是会访问a，
303表示临时性重定向，且总是使用 GET请求新的 URI。
304: 访问资源未改变，那服务器返回304,并没有返回新的资源，那浏览器就会用自身缓存的资源去用。

对于4xx，客户端错误
400，服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求，
401，请求未授权，
403，禁止访问，客户端没有权限，管理系统常用，
404：请求地址有错误，服务端没有，找不到。
406：表示无法使用请求的内容特性来响应请求的网页。说白了就是后台的返回结果前台无法解析就报406错误。

对于5xx，服务器错误，
500，最常见的服务器端错误，
503，服务器端暂时无法处理请求，可能是过载或维护

宏任务
script(整体代码)
setTimeout
setInterval
I/O
UI交互事件
postMessage
MessageChannel
setImmediate(Node.js 环境)
微任务
Promise.then
Object.observe
MutationObserver
process.nextTick(Node.js 环境)

ps -ef | grep nginx

this指向

原型、原型链
所有对象都有一个属性 __proto__ 指向一个对象，也就是原型
每个对象的原型都可以通过 constructor 找到构造函数，构造函数也可以通过 prototype 找到原型
所有函数都可以通过 __proto__ 找到 Function 对象
所有对象都可以通过 __proto__ 找到 Object 对象
对象之间通过 __proto__ 连接起来，这样称之为原型链。当前对象上不存在的属性可以通过原型链一层层往上查找，直到顶层 Object 对象，再往上就是 null 了


闭包实际运用场景：节流  防抖


apply call bind 区别

三者都可以改变函数的 this 对象指向。
三者第一个参数都是 this 要指向的对象，如果如果没有这个参数或参数为 undefined 或 null，则默认指向全局 window。
三者都可以传参，但是 apply 是数组，而 call 是参数列表，且 apply 和 call 是一次性传入参数，而 bind 可以分为多次传入。
bind 是返回绑定 this 之后的函数，便于稍后调用；apply 、call 则是立即执行 。
bind()会返回一个新的函数，如果这个返回的新的函数作为构造函数创建一个新的对象，那么此时 this 不再指向传入给 bind 的第一个参数，而是指向用 new 创建的实例

